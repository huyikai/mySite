---
import { getCollection } from 'astro:content';
import BaseLayout from '@layouts/BaseLayout.astro';
import Tag from '@components/Tag.astro';
import TagItem from '@components/TagItem.astro';
interface RenderableEntry {
  render: () => Promise<{ Content: any }>;
  data: any;
  slug: string;
}

export const getStaticPaths = async () => {
  const allStacks: RenderableEntry[] = await getCollection('stack');

  const allPaths = allStacks.map((post) => post.slug);
  const directoryPaths = new Set();

  allPaths.forEach((path) => {
    const parts = path.split('/');
    let currentPath = '';
    for (let i = 0; i < parts.length - 1; i++) {
      currentPath += (i === 0 ? '' : '/') + parts[i];
      directoryPaths.add(currentPath);
    }
  });

  const uniqueDirectoryPaths = [...directoryPaths];

  return uniqueDirectoryPaths.map((dir: any) => {
    return {
      params: {
        category: dir
      },
      props: {
        subContent: allStacks.filter(
          (post) =>
            post.slug.includes(`${dir}/`) &&
            post.slug.replace(`${dir}/`, '').split('/').length === 1
        ),
        subCategory: uniqueDirectoryPaths
          .filter((i: any) => i.includes(`${dir}/`))
          .map((i: any) => ({
            name: i.split('/').pop(),
            path: i
          }))
      }
    };
  });
};

const { category } = Astro.params;
const { subContent, subCategory } = Astro.props;
---

<BaseLayout pageTitle={category}>
  <p>Stack categoryed with {category}</p>
  {
    subCategory.length > 0 && (
      <>
        <h2>subCategory</h2>
        <Tag>
          {subCategory.map((item) => (
            <TagItem
              title={item.name}
              url={`/stack/category/${item.path}`}
            />
          ))}
        </Tag>
      </>
    )
  }
  {
    subContent.length > 0 && (
      <>
        <h2>subContent</h2>
        <Tag>
          {subContent.map((item: any) => (
            <TagItem
              url={`/stack/${item.slug}/`}
              title={item.data.title}
            />
          ))}
        </Tag>
      </>
    )
  }
</BaseLayout>
